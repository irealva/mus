
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 07 21:28:13 EDT 2011
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import lilypond.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 07 21:28:13 EDT 2011
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\004\000\002" +
    "\025\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\004\017\000\002\004\005" +
    "\000\002\004\016\000\002\021\005\000\002\021\003\000" +
    "\002\005\013\000\002\005\005\000\002\005\012\000\002" +
    "\022\005\000\002\022\003\000\002\006\012\000\002\006" +
    "\005\000\002\011\006\000\002\015\006\000\002\016\010" +
    "\000\002\017\010\000\002\017\006\000\002\012\007\000" +
    "\002\020\005\000\002\020\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\005\000\002\020\003\000\002\020\005\000\002\020\003" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\007\011\000\002\007\011\000\002\007\011\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\006\000\002\010\007\000\002\010\007\000\002\010\007" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\007\000\002\023\006\000\002" +
    "\014\006\000\002\013\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\020\005\014\013\020\014\012\015\004\025" +
    "\013\033\024\034\032\001\002\000\004\005\261\001\002" +
    "\000\004\017\260\001\002\000\004\017\257\001\002\000" +
    "\022\002\ufffa\005\ufffa\013\ufffa\014\ufffa\015\ufffa\025\ufffa" +
    "\033\ufffa\034\ufffa\001\002\000\004\017\256\001\002\000" +
    "\022\002\ufff7\005\ufff7\013\ufff7\014\ufff7\015\ufff7\025\ufff7" +
    "\033\ufff7\034\ufff7\001\002\000\004\005\241\001\002\000" +
    "\004\005\235\001\002\000\016\007\123\023\122\025\121" +
    "\027\120\031\116\032\117\001\002\000\022\002\ufff8\005" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\025\ufff8\033\ufff8\034\ufff8" +
    "\001\002\000\022\002\ufffd\005\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\025\ufffd\033\ufffd\034\ufffd\001\002\000\022\002\ufff4" +
    "\005\ufff4\013\ufff4\014\ufff4\015\ufff4\025\ufff4\033\ufff4\034" +
    "\ufff4\001\002\000\004\005\070\001\002\000\022\002\uffff" +
    "\005\014\013\020\014\012\015\004\025\013\033\024\034" +
    "\032\001\002\000\004\017\066\001\002\000\004\027\046" +
    "\001\002\000\004\023\043\001\002\000\022\002\ufffe\005" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\025\ufffe\033\ufffe\034\ufffe" +
    "\001\002\000\022\002\ufff9\005\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\025\ufff9\033\ufff9\034\ufff9\001\002\000\004\002\042" +
    "\001\002\000\022\002\ufffc\005\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\025\ufffc\033\ufffc\034\ufffc\001\002\000\022\002\ufff5" +
    "\005\ufff5\013\ufff5\014\ufff5\015\ufff5\025\ufff5\033\ufff5\034" +
    "\ufff5\001\002\000\004\023\034\001\002\000\022\002\ufffb" +
    "\005\ufffb\013\ufffb\014\ufffb\015\ufffb\025\ufffb\033\ufffb\034" +
    "\ufffb\001\002\000\004\005\035\001\002\000\004\016\036" +
    "\001\002\000\004\004\037\001\002\000\004\024\040\001" +
    "\002\000\004\017\041\001\002\000\022\002\uffc0\005\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\025\uffc0\033\uffc0\034\uffc0\001" +
    "\002\000\004\002\001\001\002\000\004\005\044\001\002" +
    "\000\004\024\045\001\002\000\004\027\uffc2\001\002\000" +
    "\010\010\050\011\047\012\051\001\002\000\004\023\062" +
    "\001\002\000\004\023\056\001\002\000\004\023\052\001" +
    "\002\000\004\004\053\001\002\000\004\024\054\001\002" +
    "\000\004\017\055\001\002\000\022\002\uffcf\005\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\025\uffcf\033\uffcf\034\uffcf\001\002" +
    "\000\004\004\057\001\002\000\004\024\060\001\002\000" +
    "\004\017\061\001\002\000\022\002\uffd1\005\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\025\uffd1\033\uffd1\034\uffd1\001\002\000" +
    "\004\004\063\001\002\000\004\024\064\001\002\000\004" +
    "\017\065\001\002\000\022\002\uffd0\005\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\025\uffd0\033\uffd0\034\uffd0\001\002\000\022" +
    "\002\ufff3\005\ufff3\013\ufff3\014\ufff3\015\ufff3\025\ufff3\033" +
    "\ufff3\034\ufff3\001\002\000\004\002\000\001\002\000\006" +
    "\007\072\017\071\001\002\000\022\002\uffef\005\uffef\013" +
    "\uffef\014\uffef\015\uffef\025\uffef\033\uffef\034\uffef\001\002" +
    "\000\006\005\073\006\075\001\002\000\006\017\111\027" +
    "\110\001\002\000\004\017\107\001\002\000\004\013\076" +
    "\001\002\000\004\023\077\001\002\000\004\005\100\001" +
    "\002\000\004\016\101\001\002\000\004\022\102\001\002" +
    "\000\004\016\103\001\002\000\004\022\104\001\002\000" +
    "\004\024\105\001\002\000\004\017\106\001\002\000\022" +
    "\002\ufff0\005\ufff0\013\ufff0\014\ufff0\015\ufff0\025\ufff0\033" +
    "\ufff0\034\ufff0\001\002\000\022\002\uffc9\005\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\025\uffc9\033\uffc9\034\uffc9\001\002\000" +
    "\004\022\112\001\002\000\022\002\uffce\005\uffce\013\uffce" +
    "\014\uffce\015\uffce\025\uffce\033\uffce\034\uffce\001\002\000" +
    "\004\016\113\001\002\000\004\022\114\001\002\000\004" +
    "\030\115\001\002\000\006\017\uffe2\021\uffe2\001\002\000" +
    "\006\005\214\025\013\001\002\000\004\022\212\001\002" +
    "\000\012\010\174\011\173\012\175\022\112\001\002\000" +
    "\004\022\163\001\002\000\004\022\160\001\002\000\010" +
    "\005\124\006\127\025\013\001\002\000\012\017\157\023" +
    "\122\025\121\027\110\001\002\000\004\017\156\001\002" +
    "\000\004\017\155\001\002\000\006\013\135\014\134\001" +
    "\002\000\004\017\133\001\002\000\004\017\132\001\002" +
    "\000\022\002\uffc5\005\uffc5\013\uffc5\014\uffc5\015\uffc5\025" +
    "\uffc5\033\uffc5\034\uffc5\001\002\000\022\002\uffc7\005\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\025\uffc7\033\uffc7\034\uffc7\001" +
    "\002\000\004\023\146\001\002\000\004\023\136\001\002" +
    "\000\004\005\137\001\002\000\004\016\140\001\002\000" +
    "\004\022\141\001\002\000\004\016\142\001\002\000\004" +
    "\022\143\001\002\000\004\024\144\001\002\000\004\017" +
    "\145\001\002\000\022\002\uffee\005\uffee\013\uffee\014\uffee" +
    "\015\uffee\025\uffee\033\uffee\034\uffee\001\002\000\004\005" +
    "\147\001\002\000\006\016\153\024\uffec\001\002\000\004" +
    "\024\151\001\002\000\004\017\152\001\002\000\022\002" +
    "\uffe9\005\uffe9\013\uffe9\014\uffe9\015\uffe9\025\uffe9\033\uffe9" +
    "\034\uffe9\001\002\000\004\005\147\001\002\000\004\024" +
    "\uffed\001\002\000\022\002\uffc6\005\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\025\uffc6\033\uffc6\034\uffc6\001\002\000\022\002" +
    "\uffc4\005\uffc4\013\uffc4\014\uffc4\015\uffc4\025\uffc4\033\uffc4" +
    "\034\uffc4\001\002\000\022\002\uffcb\005\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\025\uffcb\033\uffcb\034\uffcb\001\002\000\004" +
    "\024\161\001\002\000\006\017\uffe3\021\uffe3\001\002\000" +
    "\004\026\172\001\002\000\010\016\164\020\165\026\uffe7" +
    "\001\002\000\004\022\171\001\002\000\004\022\166\001" +
    "\002\000\004\026\167\001\002\000\006\017\uffe1\021\uffe1" +
    "\001\002\000\004\026\uffe8\001\002\000\006\016\164\026" +
    "\uffe7\001\002\000\006\017\uffe0\021\uffe0\001\002\000\004" +
    "\023\206\001\002\000\004\023\202\001\002\000\004\023" +
    "\176\001\002\000\004\004\177\001\002\000\004\024\200" +
    "\001\002\000\004\017\201\001\002\000\022\002\uffd3\005" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\025\uffd3\033\uffd3\034\uffd3" +
    "\001\002\000\004\004\203\001\002\000\004\024\204\001" +
    "\002\000\004\017\205\001\002\000\022\002\uffd4\005\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\025\uffd4\033\uffd4\034\uffd4\001" +
    "\002\000\004\004\207\001\002\000\004\024\210\001\002" +
    "\000\004\017\211\001\002\000\022\002\uffd2\005\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\025\uffd2\033\uffd2\034\uffd2\001\002" +
    "\000\004\017\213\001\002\000\022\002\uffc1\005\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\025\uffc1\033\uffc1\034\uffc1\001\002" +
    "\000\014\017\uffdd\021\233\023\122\025\121\027\110\001" +
    "\002\000\006\017\uffd9\021\231\001\002\000\006\017\uffd5" +
    "\021\227\001\002\000\006\017\uffd7\021\225\001\002\000" +
    "\004\017\224\001\002\000\006\017\uffdb\021\222\001\002" +
    "\000\006\005\214\025\013\001\002\000\004\017\uffdc\001" +
    "\002\000\022\002\uffe4\005\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\025\uffe4\033\uffe4\034\uffe4\001\002\000\006\005\214\025" +
    "\013\001\002\000\004\017\uffd8\001\002\000\006\005\214" +
    "\025\013\001\002\000\004\017\uffd6\001\002\000\006\005" +
    "\214\025\013\001\002\000\004\017\uffda\001\002\000\006" +
    "\005\214\025\013\001\002\000\004\017\uffde\001\002\000" +
    "\004\016\236\001\002\000\004\005\237\001\002\000\004" +
    "\026\240\001\002\000\006\017\uffdf\021\uffdf\001\002\000" +
    "\006\007\243\017\242\001\002\000\022\002\uffea\005\uffea" +
    "\013\uffea\014\uffea\015\uffea\025\uffea\033\uffea\034\uffea\001" +
    "\002\000\006\005\244\006\245\001\002\000\006\017\255" +
    "\023\122\001\002\000\004\014\250\001\002\000\004\017" +
    "\247\001\002\000\022\002\uffca\005\uffca\013\uffca\014\uffca" +
    "\015\uffca\025\uffca\033\uffca\034\uffca\001\002\000\004\023" +
    "\251\001\002\000\004\005\147\001\002\000\004\024\253" +
    "\001\002\000\004\017\254\001\002\000\022\002\uffeb\005" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\025\uffeb\033\uffeb\034\uffeb" +
    "\001\002\000\022\002\uffcd\005\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\025\uffcd\033\uffcd\034\uffcd\001\002\000\022\002\ufff1" +
    "\005\ufff1\013\ufff1\014\ufff1\015\ufff1\025\ufff1\033\ufff1\034" +
    "\ufff1\001\002\000\022\002\ufff2\005\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\025\ufff2\033\ufff2\034\ufff2\001\002\000\022\002" +
    "\ufff6\005\ufff6\013\ufff6\014\ufff6\015\ufff6\025\ufff6\033\ufff6" +
    "\034\ufff6\001\002\000\006\007\263\017\262\001\002\000" +
    "\022\002\uffe5\005\uffe5\013\uffe5\014\uffe5\015\uffe5\025\uffe5" +
    "\033\uffe5\034\uffe5\001\002\000\010\005\264\006\266\025" +
    "\013\001\002\000\006\017\276\025\121\001\002\000\004" +
    "\017\275\001\002\000\004\015\271\001\002\000\004\017" +
    "\270\001\002\000\022\002\uffc8\005\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\025\uffc8\033\uffc8\034\uffc8\001\002\000\004\023" +
    "\272\001\002\000\004\024\273\001\002\000\004\017\274" +
    "\001\002\000\022\002\uffe6\005\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\025\uffe6\033\uffe6\034\uffe6\001\002\000\022\002\uffc3" +
    "\005\uffc3\013\uffc3\014\uffc3\015\uffc3\025\uffc3\033\uffc3\034" +
    "\uffc3\001\002\000\022\002\uffcc\005\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\025\uffcc\033\uffcc\034\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\044\002\026\003\020\004\006\005\025\006" +
    "\014\007\027\010\032\011\010\012\004\013\030\014\016" +
    "\015\021\016\005\017\007\023\022\024\015\025\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\066\003\020\004\006\005\025\006\014" +
    "\007\027\010\032\011\010\012\004\013\030\014\016\015" +
    "\021\016\005\017\007\023\022\024\015\025\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\214\015" +
    "\216\016\215\017\220\020\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\161\001\001\000\002\001" +
    "\001\000\012\012\124\015\127\016\125\017\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\214\015\216" +
    "\016\215\017\220\020\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\214\015\216\016\215\017\220" +
    "\020\225\001\001\000\002\001\001\000\014\012\214\015" +
    "\216\016\215\017\220\020\227\001\001\000\002\001\001" +
    "\000\014\012\214\015\216\016\215\017\220\020\231\001" +
    "\001\000\002\001\001\000\014\012\214\015\216\016\215" +
    "\017\220\020\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\264\017\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {

 

	ParseTree tree = new ParseTree() ;

 
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // display ::= DISPLAY LPAREN ID COMMA STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object header = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.DISPLAY((String) name, (String) header) ;
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("display",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // change_duration ::= ID CHANGE_DURATION DIGIT SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.CHANGE_DURATION((String) name, (Integer) num); 
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("change_duration",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // foreach ::= FOREACH LPAREN ID RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
				RESULT = name ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("foreach",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // var ::= SEQUENCE ID ASSIGN concat_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_SEQ((String) name1, (Sequence)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // var ::= ID ASSIGN concat_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_SEQ((String) name1, (Sequence)name2,false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var ::= ID ASSIGN sub_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_SEQ((String) name1, (Sequence)name2,false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= ID ASSIGN note_in_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_NOTE((String) name1, (Note)name2, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // var ::= ID ASSIGN chord_in_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_CHORD((String) name1, (Chord)name2, false);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // var ::= SEQUENCE ID ASSIGN sub_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_SEQ((String) name1, (Sequence)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var ::= NOTE ID ASSIGN note_in_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_NOTE((String) name1, (Note)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var ::= CHORD ID ASSIGN chord_in_seq SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_CHORD((String) name1, (Chord) name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var ::= ID ASSIGN ID SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR((String) name1, (String)name2);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // var ::= SEQUENCE ID ASSIGN ID SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_SEQ((String) name1, (String)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var ::= CHORD ID ASSIGN ID SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_CHORD((String) name1, (String)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var ::= NOTE ID ASSIGN ID SEMICOLON 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ASSIGN_VAR_NOTE((String) name1, (String)name2, true);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("var",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign ::= foreach LTHAN INSTRUMENT LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.FOREACH_INSTRUMENT((String) name,(String) attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign ::= foreach LTHAN SHAPE LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.FOREACH_SHAPE((String) name,(String) attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign ::= foreach LTHAN COLOR LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.FOREACH_COLOR((String) name,(String)attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign ::= ID LTHAN SHAPE LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.ATTRIBUTE_SHAPE((String) name, (String) attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign ::= ID LTHAN INSTRUMENT LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
		tree.ATTRIBUTE_INSTRUMENT((String) name, (String) attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign ::= ID LTHAN COLOR LPAREN STRING_TEXT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object attribute = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
					
		tree.ATTRIBUTE_COLOR((String) name, (String) attribute);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("assign",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_variables ::= note_in_seq 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_VARIABLE_N((Object) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // list_variables ::= note_in_seq PLUS list_variables 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
			RESULT = tree.MULT_VARIABLE_N((Object) name1, (ArrayList<Object>) variable_list) ;			
			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_variables ::= chord_in_seq 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_VARIABLE_N((Object) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_variables ::= chord_in_seq PLUS list_variables 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
			RESULT = tree.MULT_VARIABLE_N((Object) name1, (ArrayList<Object>) variable_list) ;			
			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // list_variables ::= concat_seq 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_VARIABLE_N((Object) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // list_variables ::= concat_seq PLUS list_variables 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
			RESULT = tree.MULT_VARIABLE_N((Object) name1, (ArrayList<Object>) variable_list) ;			
			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_variables ::= sub_seq 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_VARIABLE_N((Object) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_variables ::= sub_seq PLUS list_variables 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
			RESULT = tree.MULT_VARIABLE_N((Object) name1, (ArrayList<Object>) variable_list) ;			
			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_variables ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_VARIABLE((String) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // list_variables ::= ID PLUS list_variables 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.MULT_VARIABLES((String) name1, (ArrayList<Object>) variable_list) ;			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_variables",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // concat_seq ::= LBRACK ID COMMA ID RBRACK 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		RESULT = tree.CONCAT_SEQ((String) s1, (String)s2);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("concat_seq",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sub_seq ::= ID LBRACK list_chords RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int chordlistleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int chordlistright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object chordlist = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		RESULT = tree.SUB_SET((String)name, (String) chordlist);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sub_seq",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sub_seq ::= ID LBRACK DIGIT COLON DIGIT RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		RESULT = tree.SUB_SEQ((String)name,(Integer) num1,(Integer) num2);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sub_seq",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // note_in_seq ::= ID LTHAN DIGIT COMMA DIGIT GTHAN 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int num_chordleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int num_chordright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object num_chord = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int num_noteleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int num_noteright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object num_note = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		RESULT = tree.NOTE_IN_SEQ((String)name1, (Integer) num_chord, (Integer)num_note);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("note_in_seq",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // chord_in_seq ::= ID LPAREN DIGIT RPAREN 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		RESULT = tree.CHORD_IN_SEQ((String)name1, (Integer) num);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("chord_in_seq",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // add_to_sequence ::= ID ADD_TO_SEQUENCE list_variables SEMICOLON 
            {
              Object RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Object sequence = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int variable_listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int variable_listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object variable_list = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.ADD_TO_SEQUENCE((String) sequence, (ArrayList<Object>) variable_list) ;
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("add_to_sequence",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sequence ::= SEQUENCE ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
		tree.SEQ((String) name);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sequence",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sequence ::= SEQUENCE ID ASSIGN NEW SEQUENCE LPAREN RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		
		tree.SEQUENCE((String) name) ;	
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sequence",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_chords ::= DIGIT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		RESULT = tree.ONE_CHORDS((Integer)name);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_chords",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_chords ::= DIGIT COMMA list_chords 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		RESULT = tree.MULT_CHORDS((Integer)name1, (String)name2);
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_chords",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // chord ::= ID ASSIGN NEW CHORD LPAREN list_notes RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int notesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int notesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object notes = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			tree.INITIALIZE_CHORD((String) name, (Chord) notes) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("chord",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // chord ::= CHORD ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
			tree.CHORD((String) name);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("chord",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // chord ::= CHORD ID ASSIGN NEW CHORD LPAREN list_notes RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int notesleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int notesright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object notes = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			tree.CHORD((String) name, (Chord) notes) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("chord",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_notes ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.ONE_NOTE((String) name) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_notes",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_notes ::= ID COMMA list_notes 
            {
              Object RESULT =null;
		int name1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int name1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object name1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int name2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int name2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object name2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			RESULT = tree.MULT_NOTES((String) name1, (Chord) name2) ;			
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("list_notes",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // note ::= ID ASSIGN NEW NOTE LPAREN ID COMMA DIGIT COMMA DIGIT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).value;
		int pitchleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int pitchright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object pitch = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int octaveleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int octaveright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object octave = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int durationleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int durationright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object duration = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			tree.INITIALIZE_NOTE((String) name, (String) pitch, (Integer) octave, (Integer) duration) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("note",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // note ::= NOTE ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
			tree.NOTE((String) name);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("note",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // note ::= NOTE ID ASSIGN NEW NOTE LPAREN ID COMMA DIGIT COMMA DIGIT RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).value;
		int pitchleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int pitchright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Object pitch = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int octaveleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int octaveright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Object octave = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int durationleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int durationright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object duration = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			tree.NOTE((String) name, (String) pitch, (Integer) octave, (Integer) duration) ;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("note",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functions ::= sub_seq SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functions ::= note_in_seq SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functions ::= chord_in_seq SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functions ::= change_duration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functions ::= display 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // functions ::= concat_seq SEMICOLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functions ::= add_to_sequence 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("functions",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // object_types ::= sequence 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("object_types",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // object_types ::= chord 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("object_types",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // object_types ::= note 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("object_types",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= var 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= assign 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= object_types 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= functions 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr_list ::= expr_part expr_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

